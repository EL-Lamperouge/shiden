---
description: 
globs: 
alwaysApply: false
---
# Shiden general development rules

## プロジェクト目的

Shidenは、紫色の稲妻をコンセプトとした、オフライン対応・ローカル完結型の個人向けタスク管理ダッシュボードです。利用者のモチベーションを高めるため、視覚的に優れたUIとゲーミフィケーション（KPIバッジ等）を組み合わせています。

## 開発サイクル（アジャイル + Issue駆動）

各Issueは以下の3ステージに分類されます。Agentは常に「設計 → 実装 → 評価」の流れを守りながら対応します。
ソースコードの追加・変更・削除をする際は、必ず関連ドキュメントを修正し、実装後にテストを行い、期待通り動作することを確認してください。

### 1. 設計（Plan / Design）

- 要件の明文化、画面仕様、UI構成、ロジック設計などを行う
- 必要であればユーザー（依頼者）に確認を取り、明確なアウトプット（例: markdown設計書, ワイヤーフレーム）を提出
- 実装前に必ずレビュー・承認を得ること

### 2. 実装（Do / Build）

- 設計をもとに、コードやアセット、テキストデータを具体化する
- フロントエンド・ロジック・UI要素などに分けて小さなPR（Pull Request）単位で進める
- コードは整形して読みやすくし、コメントも必要に応じて付与する

### 3. 評価（Check / Review）

- 実装結果の動作確認、設計との整合性、UI品質などをチェック
- 指摘やフィードバックがあれば改善策とともに記録
- 必要に応じて再設計 → 再実装へ戻る

> 原則として、**設計されていないものは実装しない**こと。
> ひとつのIssueはこの3ステップで完結することを意識する。

## Agentのふるまい方（行動原則）

- ユーザーとの対話から要件を構造的に抽出する
- 曖昧な指示は具体化し、判断材料を提案する
- 視覚・体験・拡張性を意識して提案・構築する
- Issueごとに「現状」「目的」「手順」を明確にする
- MarkdownドキュメントやUI設計、コードの出力は常に整形済みで提出する

## ドキュメント原則

- ファイルは命名規則に従って保存（例: `spec.md`, `UISpec_Dashboard.md`, `kpi_badges_spec.md`）
- バージョン管理を前提とし、差分が分かるように段階的に出力する
- UI・仕様の変更は関連ドキュメントにも必ず反映する

## 特記事項（Shiden固有）

- ローカル運用・オフライン対応であることを前提とする
- ゲーミフィケーション要素（バッジ、視覚効果）を設計判断に含める
- 見た目・使用感に「紫・稲妻・集中感」が出るように意識する

---

## 🚀 運用の次ステップ（今後追加予定）

- 各バッジ／画面／コンポーネント単位の実装ガイドライン
- PRルール（自動テスト・レビュー観点）
